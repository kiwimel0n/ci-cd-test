# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI 테스트

on:
  push:
    branches: [ "feat/CI" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

   # - name: make application.yml
   #   run: |
  #       create application.yml
   #     mkdir -p src/main/resources
    #    echo "${{ secrets.DATABASE_PROD }}" > src/main/resources/application.yml


    - name: Get latest tag
      id: get_tag
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        if [ -z "$latest_tag" ]; then
          echo "No tags found, setting initial version as v1.0.0"
          echo "v1.0.0"
        else
          echo ::set-output name=TAG::$latest_tag
        fi

    - name: Generate next version
      id: next_version
      run: echo ::set-output name=NEW_TAG::v$(echo "${{ steps.get_tag.outputs.TAG }}" | cut -c 2- | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')


    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew bootJar

    ## 도커 이미지 빌드 후 도커허브에 push하기
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }} .
        
    - name: Tag Docker image with next version
      run: docker tag ${{ secrets.DOCKER_REPO }} ${{ secrets.DOCKER_REPO }}:${{ steps.next_version.outputs.NEW_TAG }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_REPO }}:${{ steps.next_version.outputs.NEW_TAG }}
        docker push ${{ secrets.DOCKER_REPO }}:latest


